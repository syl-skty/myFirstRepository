
(1)java中的访问修饰符：1.可以用在类前面，用于表示类的访问权限
				2.可以用在方法的定义中：访问修饰符	返回值类型  方法名(参数){....	}

		访问修饰符的类型：
			public：表示可以被工程中的任何代码调用
			private:表示只能在本类中调用
			protected：表示只能在本包(package)中使用
			省略不写：表示只能在本包类使用，包括子类，但普通类不能访问
			
			
			
(2)方法的重载：在一个类中两个方法的函数名相同，但参数不一样(包括个数，类型，顺序)，这与方法的修饰符和返回值类型无关


(3)生成随机数：Math.random()方法可以生成一个在0-1之间的随机数，若要获取一个在0-10的随机数则利用(int)(Math.random()*10)来获取，让其扩大十倍


(4)类中的构造方法：访问修饰符(public)  类名(参数){}			没有返回值类型
				当我们定义一个类时，会默认生成一个无参构造方法，当我们自己定义了构造方法后那个无参构造方法将不会自动生成。


(5)静态变量和方法：
				静态变量：public static String a="hello";
						静态变量可以被所有类的对象使用，并且他的值不会变，除非被重新赋值。
						同时，静态变量可以使用(所在的类名.变量名)来调用使用，也可以使用(对象.变量名)来使用
				静态方法：public static void show(){....}
						静态方法可以直接使用(类名.方法名（参数）)来使用,不用先创建对象。也可以使用(对象.方法名（参数）)来调用.
					注意：
						静态方法中可以直接调用其他静态方法和静态变量，但不能直接使用同类中的非静态方法和静态变量(非静态方法可以直接调用)


(6)初始化块：对一批属性进行变量类型的确定
			
			非静态初始化块：
							public class test{
									public int num;
									{//非静态代码块
									num=2;
									}
								}
			静态初始化块：
							public class test{
									public int num;
									static{
										num=10;
									}
								}
		执行顺序（与书写时的顺序无关）：静态初始化块 > 非静态代码块 > 构造方法
	
(7)封装
	封装的方式能够通过对属性的访问性设置为private（私有）的，然后对属性的操作要借助属性的getter和setter方法。
	让外部程序（本类可以直接调用）无法直接访问到（同时可以在getter和setter方法中同时设置了某些规则来限制对属性的操作）
	
	
(8)this关键字：
	this可代表当前的对象：this.属性	表示当前对象的属性
					  this.方法	表示当前对象的方法
	表示当前调用该方法的对象：
						public void show(){
							System.out.print(this.name);
						}
						
						
(9)final关键字：
				修饰类：该类不允许被继承
				修饰方法：该方法不允许被重写
				修饰属性：该属性不允许被隐性初始化(例如：int的初始值为0)，一定要在构造方法中赋值，或在定义时给其赋值
				修饰变量：该变量只能被赋值一次，无法被修改，即变为常量
				
				
(10)super关键字:
				在对象内部使用，可用来表示当前类的父类的对象，无需自己创建父类的对象，使用super关键字就可以自动为我们创建一个父类的对象，并可以使用这个关键字表示父类对象
				super.show()表示调用父类的show()方法；super.age表示调用父类的属性
				当我们在子类的构造方法中调用父类构造方法时：在子类构造方法中使用super()方法调用，且必须在方法的第一个语句中调用


(11)方法的重写和重载：
				重写：表示在继承的时候，子类对父类中继承得到的方法进行重写，(方法名一致，方法的参数和类型顺序一致)
				重载:在一个类中两个方法的函数名相同，但参数不一样(包括个数，类型，顺序)，这与方法的修饰符和返回值类型无关



(12)Object类：
			Object类是所有类的父类，在创建一个类时会默认继承Object类
			Object类中的方法：
							1.toString()方法，默认返回的是对象的哈希码(hashcode，对象在内存中的地址),但在应用中一般会重写这个方法，实现对对象属性的打印
											如果直接使用System.out.println()直接打印对象，这样会默认调用这个对象的toString()方法，打印内存地址
							2.equals()方法，默认比较的是两个对象的hashcode（内存地址）,如果要比较两个对象的属性，就必须对这个方法进行重写
											例如String类中的equals()方法就被重写了


(13)instance()方法：a1  instance  a2   判断a1能否正常进行类型转换为a2,返回boolean值


(14)抽象类：
		使用abstract定义抽象类。抽象类无法实例化对象，必须使用其子类来创建实例。
		抽象类中可以定义抽象方法，在方法前面使用abstract修饰，也可以定义一些普通方法。同时在里面可以定义一些静态方法(可以使用类名.方法名（）)来调用
		
